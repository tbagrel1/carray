.TH "carray.h" 3 "Mon Sep 25 2017" "Version 0.1.3" "C-Array" \" -*- nroff -*-
.ad l
.nh
.SH NAME
carray.h \- Header of the carray class\&. Contains all function declarations and preprocessor directives\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBcarray\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDEFAULT_SPACE_INIT_FLAT\fP   8"
.br
.ti -1c
.RI "#define \fBDEFAULT_SPACE_INIT_PERCENT\fP   1\&.25"
.br
.ti -1c
.RI "#define \fBDEFAULT_SPACE_INCR\fP   2\&.0"
.br
.ti -1c
.RI "#define \fBDEFAULT_SHRINK_THRESHOLD\fP   2\&.5"
.br
.ti -1c
.RI "#define \fBDEFAULT_SHRINK_PERCENT\fP   1\&.25"
.br
.ti -1c
.RI "#define \fBPRIME_CST\fP   31"
.br
.ti -1c
.RI "#define \fBDEFAULT_TYPE_VALUE\fP   NULL"
.br
.ti -1c
.RI "#define \fBof_Char\fP   *(char*)"
.br
.ti -1c
.RI "#define \fBof_sChar\fP   *(signed char*)"
.br
.ti -1c
.RI "#define \fBof_uChar\fP   *(unsigned char*)"
.br
.ti -1c
.RI "#define \fBof_Short\fP   *(short*)"
.br
.ti -1c
.RI "#define \fBof_sShort\fP   *(signed short*)"
.br
.ti -1c
.RI "#define \fBof_uShort\fP   *(unsigned short*)"
.br
.ti -1c
.RI "#define \fBof_Int\fP   *(int*)"
.br
.ti -1c
.RI "#define \fBof_sInt\fP   *(signed int*)"
.br
.ti -1c
.RI "#define \fBof_uInt\fP   *(unsigned int*)"
.br
.ti -1c
.RI "#define \fBof_Long\fP   *(long*)"
.br
.ti -1c
.RI "#define \fBof_lLong\fP   *(long long*)"
.br
.ti -1c
.RI "#define \fBof_sLong\fP   *(signed long*)"
.br
.ti -1c
.RI "#define \fBof_slLong\fP   *(signed long long*)"
.br
.ti -1c
.RI "#define \fBof_uLong\fP   *(unsigned long*)"
.br
.ti -1c
.RI "#define \fBof_ulLong\fP   *(unsigned long long*)"
.br
.ti -1c
.RI "#define \fBof_Float\fP   *(float*)"
.br
.ti -1c
.RI "#define \fBof_Double\fP   *(double*)"
.br
.ti -1c
.RI "#define \fBof_lDouble\fP   *(long double*)"
.br
.ti -1c
.RI "#define \fBof_Bool\fP   *(bool*)"
.br
.ti -1c
.RI "#define \fBof_String\fP   (char*)"
.br
.ti -1c
.RI "#define \fBChar\fP(expr)"
.br
.ti -1c
.RI "#define \fBsChar\fP(expr)"
.br
.ti -1c
.RI "#define \fBuChar\fP(expr)"
.br
.ti -1c
.RI "#define \fBShort\fP(expr)"
.br
.ti -1c
.RI "#define \fBsShort\fP(expr)"
.br
.ti -1c
.RI "#define \fBuShort\fP(expr)"
.br
.ti -1c
.RI "#define \fBInt\fP(expr)"
.br
.ti -1c
.RI "#define \fBsInt\fP(expr)"
.br
.ti -1c
.RI "#define \fBuInt\fP(expr)"
.br
.ti -1c
.RI "#define \fBLong\fP(expr)"
.br
.ti -1c
.RI "#define \fBlLong\fP(expr)"
.br
.ti -1c
.RI "#define \fBsLong\fP(expr)"
.br
.ti -1c
.RI "#define \fBslLong\fP(expr)"
.br
.ti -1c
.RI "#define \fBuLong\fP(expr)"
.br
.ti -1c
.RI "#define \fBulLong\fP(expr)"
.br
.ti -1c
.RI "#define \fBFloat\fP(expr)"
.br
.ti -1c
.RI "#define \fBDouble\fP(expr)"
.br
.ti -1c
.RI "#define \fBlDouble\fP(expr)"
.br
.ti -1c
.RI "#define \fBBool\fP(expr)"
.br
.ti -1c
.RI "#define \fBString\fP(expr)"
.br
.ti -1c
.RI "#define \fBfree_Obj\fP   &\fBcarray_free_obj\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBcarray\fP \fBcarray\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBhashtype\fP"
.br
.ti -1c
.RI "typedef void * \fBtype\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBcarray_free_obj\fP (type)"
.br
.ti -1c
.RI "\fBcarray\fP * \fBcarray_new\fP ()"
.br
.ti -1c
.RI "\fBcarray\fP * \fBcarray_new_ISC\fP (size_t)"
.br
.ti -1c
.RI "\fBcarray\fP * \fBcarray_new_CC\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "\fBcarray\fP * \fBcarray_new_CISC\fP (\fBcarray\fP *, size_t)"
.br
.ti -1c
.RI "void \fBcarray_free\fP (\fBcarray\fP *, void(type))"
.br
.ti -1c
.RI "size_t \fBcarray_getsize\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "void \fBcarray_clear\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "bool \fBcarray_isempty\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "size_t \fBcarray_getspace\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "void \fBcarray_setspace\fP (\fBcarray\fP *, size_t, void **)"
.br
.ti -1c
.RI "void \fBcarray_adjust\fP (\fBcarray\fP *, void **)"
.br
.ti -1c
.RI "size_t \fBcarray_getreadposition\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "size_t \fBcarray_readingsremaining\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "void \fBcarray_setreadposition\fP (\fBcarray\fP *, int, void **)"
.br
.ti -1c
.RI "type * \fBcarray_getarray\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "type \fBcarray_read\fP (\fBcarray\fP *, void **ok)"
.br
.ti -1c
.RI "void \fBcarray_reverse\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "\fBcarray\fP * \fBcarray_reversed_TF\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "void \fBcarray_append\fP (\fBcarray\fP *, \fBcarray\fP *, void **)"
.br
.ti -1c
.RI "\fBcarray\fP * \fBcarray_concat_TF\fP (\fBcarray\fP *, \fBcarray\fP *)"
.br
.ti -1c
.RI "char * \fBcarray_tostring_TF\fP (\fBcarray\fP *, char *(type), char *, char *, char *, char *)"
.br
.ti -1c
.RI "hashtype \fBcarray_hashcode\fP (\fBcarray\fP *, hashtype(type))"
.br
.ti -1c
.RI "bool \fBcarray_equal\fP (\fBcarray\fP *, \fBcarray\fP *, bool(type, type))"
.br
.ti -1c
.RI "int \fBcarray_indexof\fP (\fBcarray\fP *, type, bool(type, type))"
.br
.ti -1c
.RI "int \fBcarray_lastindexof\fP (\fBcarray\fP *, type, bool(type, type))"
.br
.ti -1c
.RI "bool \fBcarray_contains\fP (\fBcarray\fP *, type, bool(type, type))"
.br
.ti -1c
.RI "\fBcarray\fP * \fBcarray_subcarray_TF\fP (\fBcarray\fP *, int, int, void **)"
.br
.ti -1c
.RI "\fBcarray\fP * \fBcarray_subcarraystep_TF\fP (\fBcarray\fP *, int, int, int, void **)"
.br
.ti -1c
.RI "type * \fBcarray_subarray_TF\fP (\fBcarray\fP *, int, int, void **)"
.br
.ti -1c
.RI "type * \fBcarray_subarraystep_TF\fP (\fBcarray\fP *, int, int, int, void **)"
.br
.ti -1c
.RI "type * \fBcarray_toarray_TF\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "type \fBcarray_get\fP (\fBcarray\fP *, int, void **)"
.br
.ti -1c
.RI "void \fBcarray_add\fP (\fBcarray\fP *, int, type, void **)"
.br
.ti -1c
.RI "void \fBcarray_push\fP (\fBcarray\fP *, type)"
.br
.ti -1c
.RI "void \fBcarray_ins\fP (\fBcarray\fP *, type)"
.br
.ti -1c
.RI "void \fBcarray_set\fP (\fBcarray\fP *, int, type, void **)"
.br
.ti -1c
.RI "void \fBcarray_safeset\fP (\fBcarray\fP *, int, type, void **)"
.br
.ti -1c
.RI "type \fBcarray_remove\fP (\fBcarray\fP *, int, void **)"
.br
.ti -1c
.RI "type \fBcarray_pop\fP (\fBcarray\fP *)"
.br
.ti -1c
.RI "bool \fBcarray_remove_elt\fP (\fBcarray\fP *, type, bool(type, type))"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "char * \fBChar_holder\fP"
.br
.ti -1c
.RI "signed char * \fBsChar_holder\fP"
.br
.ti -1c
.RI "unsigned char * \fBuChar_holder\fP"
.br
.ti -1c
.RI "short * \fBShort_holder\fP"
.br
.ti -1c
.RI "signed short * \fBsShort_holder\fP"
.br
.ti -1c
.RI "unsigned short * \fBuShort_holder\fP"
.br
.ti -1c
.RI "int * \fBInt_holder\fP"
.br
.ti -1c
.RI "signed int * \fBsInt_holder\fP"
.br
.ti -1c
.RI "unsigned int * \fBuInt_holder\fP"
.br
.ti -1c
.RI "long * \fBLong_holder\fP"
.br
.ti -1c
.RI "long long * \fBlLong_holder\fP"
.br
.ti -1c
.RI "signed long * \fBsLong_holder\fP"
.br
.ti -1c
.RI "signed long long * \fBslLong_holder\fP"
.br
.ti -1c
.RI "unsigned long * \fBuLong_holder\fP"
.br
.ti -1c
.RI "unsigned long long * \fBulLong_holder\fP"
.br
.ti -1c
.RI "float * \fBFloat_holder\fP"
.br
.ti -1c
.RI "double * \fBDouble_holder\fP"
.br
.ti -1c
.RI "long double * \fBlDouble_holder\fP"
.br
.ti -1c
.RI "bool * \fBBool_holder\fP"
.br
.ti -1c
.RI "char * \fBString_holder\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Header of the carray class\&. Contains all function declarations and preprocessor directives\&. 


.PP
Definition in file \fBcarray\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for C-Array from the source code\&.
